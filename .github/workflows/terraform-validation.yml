name: Terraform Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-validation.yml'
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-validation.yml'

env:
  TF_VERSION: '1.5.0'

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: |
        echo "Checking Terraform formatting..."
        if terraform fmt -check -recursive -diff; then
          echo "fmt_result=success" >> $GITHUB_OUTPUT
          echo "All files are properly formatted"
        else
          echo "fmt_result=failure" >> $GITHUB_OUTPUT
          echo "Formatting issues found:"
          terraform fmt -check -recursive -diff
          echo ""
          echo "Auto-formatting files..."
          terraform fmt -recursive
          echo "Files have been formatted. Please commit the changes."
        fi
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: |
        if terraform validate; then
          echo "validate_result=success" >> $GITHUB_OUTPUT
        else
          echo "validate_result=failure" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Terraform Plan (Dry Run)
      id: plan
      run: |
        # Create a dummy terraform.tfvars for planning
        echo 'name = "test-website"' > terraform.tfvars
        echo 'environment = "Development"' >> terraform.tfvars
        
        # Skip plan step - validation is sufficient for CI
        echo "Skipping plan step in CI - validation passed"
        echo "plan_output=Plan skipped in CI environment" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Comment PR - Success
      if: github.event_name == 'pull_request' && steps.fmt.outputs.fmt_result == 'success' && steps.validate.outputs.validate_result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## Terraform Validation Results ✅

          #### Format Check 🖌️\`${{ steps.fmt.outputs.fmt_result }}\`
          #### Initialization ⚙️\`${{ steps.init.outcome }}\`  
          #### Validation 🤖\`${{ steps.validate.outputs.validate_result }}\`
          #### Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`
          ${{ steps.plan.outputs.plan_output }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Comment PR - Failure
      if: github.event_name == 'pull_request' && (steps.fmt.outputs.fmt_result == 'failure' || steps.validate.outputs.validate_result == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## Terraform Validation Results ❌

          #### Format Check 🖌️\`${{ steps.fmt.outputs.fmt_result }}\`
          #### Initialization ⚙️\`${{ steps.init.outcome }}\`  
          #### Validation 🤖\`${{ steps.validate.outputs.validate_result }}\`
          #### Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Validation Errors</summary>

          \`\`\`
          ${{ steps.validate.outputs.stderr }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Fail job if validation fails
      if: steps.validate.outputs.validate_result == 'failure'
      run: |
        echo "Validation failed - this is a blocking error"
        exit 1

  example-validate:
    name: Example Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Validate Basic Example
      working-directory: ./examples/basic
      run: |
        terraform init
        terraform validate
        echo "Example validation completed - skipping plan in CI"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true